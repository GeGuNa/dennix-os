/* Copyright (c) 2016, 2017, 2019 Dennis WÃ¶lfing
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* kernel/linker.ld.in
 * Linker script that tells how the kernel will be loaded into memory.
 */

#define KERNEL_PHYSICAL 0x100000

#ifdef __i386__
#  define KERNEL_VIRTUAL 0xC0000000
#elif defined(__x86_64__)
#  define KERNEL_VIRTUAL 0xFFFFFFFF80000000
#endif

ENTRY(_start);

SECTIONS {
    . = KERNEL_PHYSICAL;

    bootstrapBegin = .;

    bootstrap_text : {
        *(multiboot)
        *(bootstrap_text)
    }
    bootstrap_rodata : {
        *(bootstrap_rodata)
    }

    bootstrap_bss ALIGN(4096) : {
        *(bootstrap_bss)
    }

    bootstrapEnd = ALIGN(4096);
    numBootstrapPages = (bootstrapEnd - bootstrapBegin) / 0x1000;

    . += KERNEL_VIRTUAL;

    kernelVirtualBegin = ALIGN(4096);
    kernelPhysicalBegin = kernelVirtualBegin - KERNEL_VIRTUAL;

    .init ALIGN(4096) : AT(ADDR(.init) - KERNEL_VIRTUAL) {
        *(.init)
    }

    .text : AT(ADDR(.text) - KERNEL_VIRTUAL) {
        *(.text.unlikely)
        *(.text.exit)
        *(.text.startup)
        *(.text*)
    }

    .fini : AT(ADDR(.fini) - KERNEL_VIRTUAL) {
        *(.fini)
    }

    kernelExecEnd = ALIGN(4096);
    numExecPages = (kernelExecEnd - kernelVirtualBegin) / 0x1000;

    .rodata ALIGN(4096) : AT(ADDR(.rodata) - KERNEL_VIRTUAL) {
        *(.rodata*)
    }

    kernelReadOnlyEnd = ALIGN(4096);
    numReadOnlyPages = (kernelReadOnlyEnd - kernelVirtualBegin) / 0x1000;

    .data ALIGN(4096) : AT(ADDR(.data) - KERNEL_VIRTUAL) {
        *(.data)
    }

    .ctors : AT(ADDR(.ctors) - KERNEL_VIRTUAL) {
        *(.ctors)
    }

    .dtors : AT(ADDR(.dtors) - KERNEL_VIRTUAL) {
        *(.dtors)
    }

    .bss ALIGN(4096) : AT(ADDR(.bss) - KERNEL_VIRTUAL) {
        *(.bss)
    }

    kernelVirtualEnd = ALIGN(4096);
    kernelPhysicalEnd = kernelVirtualEnd - KERNEL_VIRTUAL;
    numWritablePages = (kernelVirtualEnd - kernelReadOnlyEnd) / 0x1000;
}
